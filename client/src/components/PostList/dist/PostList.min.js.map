{"version":3,"sources":["PostList.tsx"],"names":["react_1","require","react_router_dom_1","client_1","queries_1","mutations_1","auth_1","CommentForm_1","CommentList_1","PostList","_a","deletePost","event","__awaiter","console","log","currentTarget","id","removePost","variables","postId","sent","data","error","err_1","window","location","reload","getPostId","value","target","setSinglePostId","closeComments","singlePostId","posts","_c","useState","_d","useMutation","REMOVE_POST","singlePost","_b","useQuery","QUERY_SINGLE_POST","post","length","createElement","className","map","key","_id","Link","to","postAuthor","createdAt","isChecked","postPic","postText","src","alt","loggedIn","type","onClick","comments","getProfile","username","exports"],"mappings":"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","file":"PostList.min.js","sourcesContent":["import React, {FunctionComponent, MouseEvent, useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useQuery, useMutation} from '@apollo/client';\r\nimport { QUERY_SINGLE_POST } from '../../utils/queries';\r\nimport { REMOVE_POST  } from '../../utils/mutations';\r\nimport \"./postList.css\";\r\n\r\n\r\nimport Auth from '../../utils/auth';\r\nimport CommentForm from '../CommentForm/CommentForm';\r\nimport CommentList from '../CommentList/CommentList';\r\n\r\ninterface Post  {\r\n  _id: string\r\n  postText: string\r\n  postPic: string\r\n  postAuthor: string\r\n  createdAt: string\r\n  isChecked: boolean\r\n}\r\n\r\ntype PostProps = {\r\n  posts: any \r\n}\r\n\r\nconst PostList:FunctionComponent<PostProps> = ( {posts \r\n}) => {\r\n\r\n  const [singlePostId, setSinglePostId] = useState('');  \r\n\r\n  const [removePost, { error }] = useMutation(REMOVE_POST);\r\n\r\n  const { data } =  useQuery( QUERY_SINGLE_POST, {  \r\n      variables: { \r\n        postId: singlePostId,  \r\n      },\r\n    }\r\n  );\r\n\r\n  const singlePost = data?.post || {};\r\n\r\n  const deletePost =  async (event: MouseEvent<HTMLButtonElement>) => {\r\n    console.log(event.currentTarget.id);\r\n\r\n    try {\r\n      const { data } = await removePost({\r\n        variables: {\r\n          postId: event.currentTarget.id,          \r\n        },\r\n      });     \r\n     \r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    window.location.reload();\r\n   };\r\n\r\n  const getPostId = (event: MouseEvent<HTMLButtonElement>) => {\r\n    const { value }: any  = event.target;   ;\r\n    setSinglePostId(value);    \r\n  };\r\n\r\n  const closeComments = (event: MouseEvent<HTMLButtonElement>) => {    \r\n    setSinglePostId(\"\");\r\n    console.log(singlePostId);\r\n  };\r\n\r\n  if (!posts.length) {\r\n    return <h3 className=\"no-posts\">No Posts Yet</h3>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"postlist-container\">  \r\n    \r\n      {posts &&\r\n        posts.map((post: Post ) => (\r\n        <div className=\"post-container\"key={post._id} >\r\n          <h4 className='mail'>          \r\n  \r\n            <Link to={`/profiles/${post.postAuthor}`}>\r\n                  {post.postAuthor}              \r\n            </Link>  \r\n            <p className=\"postdate\">posted on {post.createdAt}</p>    \r\n            <p>{post.isChecked}</p>         \r\n          </h4>\r\n        {!post.postPic && ( \r\n        <div className=\"post-text-container\">\r\n          <p>{post.postText}</p>\r\n        </div>\r\n        )} \r\n        {post.postPic && (\r\n          <div className=\"post-pic-container\">\r\n            <div className=\"post-pic\">\r\n              <img className=\"post-pic-image\"src={post.postPic} alt='drawing'></img>\r\n            </div>\r\n          </div>\r\n        )}\r\n      \r\n\r\n{Auth.loggedIn() ? (\r\n        <div className=\"post-footer\">       \r\n          <div className=\"post-comment-link\">                \r\n            {post._id === singlePost._id ? (\r\n            <div>           \r\n              <button className=\"comment-close-btn\"type=\"submit\" onClick={closeComments}>Close Comments</button>\r\n              <CommentForm postId={post._id} />\r\n              <CommentList comments={singlePost.comments} />     \r\n            </div>             \r\n            ) : (           \r\n              <button className=\"post-comment-btn\" type=\"submit\" value={post._id} onClick= {getPostId}>Comments</button>\r\n            )}\r\n            \r\n          </div>    \r\n          <div className=\"delete-btn-container\">     \r\n          {Auth.loggedIn() && Auth.getProfile().data.username === post.postAuthor? (\r\n          \r\n          <button id={post._id} className=\"delete-btn\" type=\"submit\" onClick={deletePost}>Delete Post</button>\r\n\r\n          ) : null\r\n        }   \r\n         </div>\r\n        </div>\r\n         ) : null }\r\n      </div>\r\n      ))}\r\n    </div>\r\n);\r\n};\r\n  \r\n  export default PostList;"]}